var cluster = require('cluster');
var fs = require('fs');
const isWinOS = process.platform == 'win32';

if (cluster.isMaster) {
  console.log('Starting cluster with pid: ' + process.pid);

  // ensure workers exit cleanly
  process.on('SIGINT', () => {
    console.log('Cluster shutting down..');

    // send kill cmd to all workers
    for (var id in cluster.workers) {
      console.log('Worker (' + id + ') shutting down...');

       if (!isWinOS) {
        // only kill the worker if not on windows (otherwise an error is displayed)
        process.kill(cluster.workers[id]['process']['pid'], 'SIGINT');
       }
    }

    function waitForWorkerShutdown () {
      if (Object.keys(cluster.workers).length > 0) {
        // continue waiting since worker threads are still open
        setTimeout(waitForWorkerShutdown, 100);
      } else {
        // all worker threads have closed
        // now exit the master process
        
        if (isWinOS) {
          // command line in windows doesn't seem to release itself
          // show a message that the app has finished
          console.log('The application is now safe to close');
        }

        process.exit(0);
      }
    }

    waitForWorkerShutdown();
  });

  // count the machine's CPUs
  var cpuCount = require('os').cpus().length;

  // create a worker for each CPU
  for (var i = 0; i < cpuCount; i += 1)
    cluster.fork();

  // listen for dying workers
  cluster.on('exit', function (worker, code, signal) {
    if (worker['process']['exitCode'] === 0) {
      console.log('Worker (' + worker['id'] + ') shutdown complete');
    } else if (signal != 'SIGINT' && worker['process']['exitCode'] !== 0 && worker['process']['exitCode'] !== 999 && worker.exitedAfterDisconnect !== true) {
      console.log('Cluster restarting...');
      cluster.fork();
    }
  });
} else
  require('./instance');